{
  "version": 3,
  "sources": ["../../build/util.js", "../../build/storage.js", "../../build/options.js"],
  "sourcesContent": ["// util.ts provides utility functions that can be reused in other modules\nexport function addMinutes(date, minutes) {\n    return new Date(date.getTime() + minutes * 60000);\n}\nexport function cleanDomain(urls) {\n    // check to see if urls exist\n    if (urls[0] === undefined) {\n        // return empty if not\n        return '';\n    }\n    else {\n        // regex match for url\n        const activeURL = urls[0].match(/^[\\w]+:\\/{2}([\\w\\.:-]+)/);\n        // no matching sites, return empty\n        if (activeURL == null) {\n            return '';\n        }\n        else {\n            // strip www.\n            return activeURL[1].replace('www.', '');\n        }\n    }\n}\nexport function insertAfter(newNode, existingNode) {\n    existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\n}\nexport function createDivFromHTML(htmlString) {\n    const newDiv = document.createElement('div');\n    newDiv.insertAdjacentHTML('beforeend', htmlString);\n    return newDiv;\n}\nexport function getElementFromForm(id) {\n    return document.getElementById(id);\n}\n", "// storage.ts provides a thin wrapper around the chrome storage api to make it easier to read/write from it\n// you can also find helper functions that read/write to chrome storage\nimport { addMinutes } from './util';\n// helper function to retrive chrome storage object\n// usage:\n//\n// getStorage(null).then(storage => {\n//     ...\n// })\nexport function getStorage() {\n    return new Promise((resolve, reject) => {\n        chrome.storage.sync.get(null, (storage) => {\n            if (chrome.runtime.lastError !== undefined) {\n                reject(chrome.runtime.lastError);\n            }\n            else {\n                resolve(storage);\n            }\n        });\n    });\n}\n// helper function to set fields in chrome storage\n// usage:\n//\n// getStorage({enableBlobs: false}).then(storage => {\n//     ...\n// })\nexport function setStorage(key) {\n    return new Promise((resolve, reject) => {\n        chrome.storage.sync.set(key, () => {\n            if (chrome.runtime.lastError !== undefined) {\n                reject(chrome.runtime.lastError);\n            }\n            else {\n                resolve();\n            }\n        });\n    });\n}\n// Add a single url to blocklist (does nothing if url is already in list)\nexport function addToBlocked(url, callback) {\n    getStorage().then((storage) => {\n        if (!storage.blockedSites.includes(url)) {\n            storage.blockedSites.push(url);\n            setStorage({ blockedSites: storage.blockedSites }).then(() => {\n                console.log(`${url} added to blocked sites`);\n                callback ? callback() : () => { };\n            });\n        }\n    });\n}\n// Remove single url from blocklist (does nothing if url is not in list)\nexport function removeFromBlocked(url) {\n    getStorage().then((storage) => {\n        let blockedSites = storage.blockedSites;\n        blockedSites = blockedSites.filter((e) => e !== url);\n        setStorage({ blockedSites: blockedSites }).then(() => {\n            console.log(`removed ${url} from blocked sites`);\n        });\n    });\n}\n// Add a single url to whitelist with associated whitelist duration\n// (replaces any existing entries)\nexport function addToWhitelist(url, minutes) {\n    getStorage().then((storage) => {\n        let whitelistedSites = storage.whitelistedSites;\n        let expiry = addMinutes(new Date(), minutes);\n        whitelistedSites[url] = expiry.toJSON();\n        setStorage({ whitelistedSites: whitelistedSites }).then(() => {\n            console.log(`${url} added to whitelisted sites`);\n        });\n    });\n}\nexport function logIntentToStorage(intentString, intentDate, url) {\n    getStorage().then((storage) => {\n        let intentList = storage.intentList;\n        // getting oldest date value from intent list map\n        let oldest_date = new Date();\n        for (const rawDate in intentList) {\n            const date = new Date(rawDate);\n            if (date < oldest_date) {\n                oldest_date = date;\n            }\n        }\n        // deleting oldest intent to keep intent count under limit\n        if (Object.keys(intentList).length > storage.numIntentEntries) {\n            console.log(`list full, popping ${oldest_date.toJSON()}`);\n            delete intentList[oldest_date.toJSON()];\n        }\n        // adding new intent and date to intent list\n        intentList[intentDate.toJSON()] = {\n            intent: intentString,\n            url: url,\n        };\n        // saving intentList to chrome storage\n        setStorage({ intentList: intentList }).then(() => {\n            console.log(`logged intent \"${intentString}\"`);\n        });\n    });\n}\n", "import { addToBlocked, getStorage, setStorage } from './storage';\nimport { getElementFromForm } from './util';\nconst ENTER_KEY_CODE = 13;\n// On page load, draw table and add button listener\ndocument.addEventListener('DOMContentLoaded', () => {\n    // setup button listeners and draw tables\n    drawFilterListTable();\n    drawIntentListTable();\n    setAddButtonListener();\n    // update threshold display value\n    const slider = document.getElementById('thresholdSlider');\n    const display = document.getElementById('thresholdSliderValue');\n    const sliderToValue = (slider) => `${Math.round(+slider.value * 100)}%`;\n    slider.oninput = () => {\n        display.innerHTML = sliderToValue(slider);\n    };\n    // set state of page based off of storage\n    getStorage().then((storage) => {\n        var _a, _b, _c;\n        getElementFromForm('whitelistTime').value = storage.whitelistTime;\n        getElementFromForm('numIntentEntries').value = storage.numIntentEntries;\n        getElementFromForm('minIntentLength').value = (_a = storage.minIntentLength, (_a !== null && _a !== void 0 ? _a : 3));\n        getElementFromForm('customMessage').value = storage.customMessage || '';\n        getElementFromForm('enableBlobs').checked = (_b = storage.enableBlobs, (_b !== null && _b !== void 0 ? _b : true));\n        getElementFromForm('enable3D').checked = (_c = storage.enable3D, (_c !== null && _c !== void 0 ? _c : true));\n        getElementFromForm('thresholdSlider').value = storage.predictionThreshold || 0.5;\n        display.innerHTML = sliderToValue(slider);\n    });\n    // options listeners\n    document.getElementById('save').addEventListener('click', saveCurrentOptions);\n});\nfunction saveCurrentOptions() {\n    // get all form values\n    const whitelistTime = getElementFromForm('whitelistTime').value;\n    const numIntentEntries = getElementFromForm('numIntentEntries').value;\n    const minIntentLength = getElementFromForm('minIntentLength').value;\n    const customMessage = getElementFromForm('customMessage').value;\n    const enableBlobs = getElementFromForm('enableBlobs').checked;\n    const enable3D = getElementFromForm('enable3D').checked;\n    const predictionThreshold = getElementFromForm('thresholdSlider').value;\n    setStorage({\n        numIntentEntries: numIntentEntries,\n        whitelistTime: whitelistTime,\n        customMessage: customMessage,\n        enableBlobs: enableBlobs,\n        enable3D: enable3D,\n        predictionThreshold: predictionThreshold,\n        minIntentLength: minIntentLength,\n    }).then(() => {\n        // Update status to let user know options were saved.\n        const status = document.getElementById('statusContent');\n        status.textContent = 'options saved.';\n        setTimeout(() => {\n            status.textContent = '';\n        }, 1500);\n    });\n}\nfunction updateButtonListeners() {\n    // get all buttons\n    const buttons = document.getElementsByTagName('button');\n    for (const button of buttons) {\n        button.addEventListener('click', () => {\n            var _a;\n            // get button ID\n            const id = parseInt(button.id[0]);\n            // get url\n            const url = (_a = document.getElementById(button.id[0] + 'site')) === null || _a === void 0 ? void 0 : _a.innerHTML;\n            // get blockedSites\n            getStorage().then((storage) => {\n                const blockedSites = storage.blockedSites;\n                // remove by ID\n                blockedSites.splice(id, 1);\n                // sync with chrome storage\n                setStorage({ blockedSites: blockedSites }).then(() => {\n                    console.log(`removed ${url} from blocked list`);\n                    drawFilterListTable();\n                });\n            });\n        });\n    }\n}\nfunction generateWebsiteDiv(id, site) {\n    return `<tr>\n    <td style=\"width: 95%\"><p class=\"urlDisplay\" id=${id}>${site}</p></td>\n    <td style=\"width: 5%\"><button id=${id}>&times;</button></td>\n    </tr>`;\n}\nfunction generateIntentDiv(id, intent, date, url) {\n    // reformatting date to only include month, date, and 12 hour time\n    const formattedDate = date.toLocaleDateString('default', {\n        month: 'long',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true,\n    });\n    // creating display table for intents and dates\n    return `<tr>\n      <td style=\"width: 40%\"><p class=\"intentDisplay\" id=${id}>${url}</p></td>\n      <td style=\"width: 40%\"><p class=\"intentDisplay\" id=${id}>${intent}</p></td>\n      <td style=\"width: 20%\"><p class=\"intentDisplay\" id=${id}>${formattedDate}</p></td>\n    </tr>`;\n}\nfunction drawFilterListTable() {\n    getStorage().then((storage) => {\n        const blockedSites = storage.blockedSites;\n        // appending row for each addiitonal blocked site\n        const tableContent = blockedSites.reduce((table, site, cur_id) => {\n            table += generateWebsiteDiv(cur_id, site);\n            return table;\n        }, '');\n        // generates new line in table for new intent\n        const table = `<table class=\"hover shadow styled\">${tableContent}</table>`;\n        // adds table to html\n        const filterList = document.getElementById('filterList');\n        if (filterList != null) {\n            filterList.innerHTML = table;\n        }\n        // adding listener to \"x\"\n        updateButtonListeners();\n    });\n}\nfunction drawIntentListTable() {\n    getStorage().then((storage) => {\n        const intentList = storage.intentList;\n        // generate table element\n        let table = `<table id=\"intentList\" class=\"hover shadow styled\">\n        <tr>\n        <th id=\"urlHeader\" style=\"width: 40%\">url</th>\n        <th style=\"width: 40%\">intent</th>\n        <th style=\"width: 20%\">date</th>\n      </tr>`;\n        let cur_id = 0;\n        // iter dates in intentList\n        for (const rawDate in intentList) {\n            // if number of entries is less than max\n            if (cur_id < storage.numIntentEntries) {\n                // parse fields from intentlist[rawDate]\n                const date = new Date(rawDate);\n                const intent = intentList[rawDate].intent;\n                const url = intentList[rawDate].url;\n                // append table row with this info\n                table += generateIntentDiv(cur_id, intent, date, url);\n                cur_id++;\n            }\n        }\n        // generates new line in table for new intent\n        table += '</table>';\n        // insert table into html\n        const previousIntents = document.getElementById('previousIntents');\n        if (previousIntents != null) {\n            previousIntents.innerHTML = table;\n        }\n    });\n}\n// sets event listeners for add new url operations\nfunction setAddButtonListener() {\n    const urlInputElement = document.getElementById('urlInput');\n    // add key listener to submit new url on <ENTER> pressed\n    urlInputElement.addEventListener('keypress', (event) => {\n        if (event.keyCode === ENTER_KEY_CODE) {\n            addUrlToFilterList();\n        }\n    });\n    // add click listener to add URL button\n    const addButton = document.getElementById('add');\n    addButton.addEventListener('click', () => {\n        addUrlToFilterList();\n    });\n}\nfunction addUrlToFilterList() {\n    // get urlInput\n    const urlInput = document.getElementById('urlInput');\n    // see if value is non-empty\n    if (urlInput.value !== '') {\n        const url = urlInput.value;\n        addToBlocked(url, () => {\n            urlInput.value = '';\n            drawFilterListTable();\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
